{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","Detail","props","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"wYAuDeA,MAhDf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OAAS,yBACDC,UAAY,SAChB,kBACA,IADA,CACKC,GACD,CACIC,SAAS,UAAD,OAAYR,GACpBS,MAAO,CACHR,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,OAAQA,EACRC,OAAQA,KAKpB,yBACIK,IAAQN,EACZO,IAAQT,EACRA,MAAUA,IAjBV,IAkBG,yBACCI,UAAY,eAChB,wBACGA,UAAY,gBADf,IACkCJ,EADlC,KAFG,KAG+C,wBAC/CI,UAAY,eADmC,IACjBL,EADiB,KAH/C,IAI4C,wBAC5CK,UAAY,iBADgC,IAE3CD,EAAOO,KAAI,SAACC,EAAOC,GAAR,OAAoB,wBACxBC,IAAQD,EACXR,UAAY,iBAFe,IAEKO,EAFL,QAFY,KAJ5C,IAUM,uBACPP,UAAY,kBADL,IAC0BH,EAAQa,MAAM,EAAG,KAD3C,QAVN,KAlBH,KAFK,MC4DEC,G,kNA7DXR,MAAQ,CACJS,WAAW,EACXC,OAAQ,I,EAUZC,U,sBAAY,8BAAAC,EAAA,sEAKEC,IAAMC,IACZ,4DANI,gBAGQJ,EAHR,EAEJK,KACIA,KAAQL,OAQhB,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAX3B,2C,kEAeRQ,KAAKN,c,+BAEC,IAAD,EACyBM,KAAKjB,MAA3BS,EADH,EACGA,UAAWC,EADd,EACcA,OACnB,OAAS,6BACGb,UAAY,aADf,IAC+B,IAD/B,IAEDY,EAAc,yBACNZ,UAAY,UAChB,0BACKA,UAAY,gBADjB,eACqD,IAH3C,KAKR,yBACEA,UAAY,UADd,IAC2B,IAD3B,IAEEa,EAAOP,KAAI,SAACe,GAAD,OAEP,kBACA,EADA,CACMZ,IAAQY,EAAM3B,GACpBA,GAAO2B,EAAM3B,GACbC,KAAS0B,EAAM1B,KACfC,MAAUyB,EAAMzB,MAChBC,QAAYwB,EAAMxB,QAClBC,OAAWuB,EAAMC,mBACjBvB,OAAWsB,EAAMtB,YAXvB,IAcE,IAdF,KAPL,IAwBD,IAxBC,S,GAhCEwB,IAAMC,Y,MCUVC,MAbf,WACI,OAAS,yBACDzB,UAAY,oBAChB,kCACS,IADT,gHAGiB,IAHjB,KAIW,IANN,IAMW,6DACyB,IAPpC,MCyBE0B,E,kLAjBU,IAAD,EACcN,KAAKO,MAA3BC,EADQ,EACRA,SAAUC,EADF,EACEA,aACKC,IAAnBF,EAASzB,OACT0B,EAAQE,KAAK,O,+BAGX,IACEH,EAAaR,KAAKO,MAAlBC,SAER,OAAIA,EAASzB,MACF,kCAAUyB,EAASzB,MAAMP,MAAzB,KAEA,S,GAhBE2B,IAAMC,W,YCiBZQ,MAVf,WACI,OAAS,yBACDhC,UAAY,OAChB,kBACA,IADA,CACKC,GAAK,KADV,UAFK,IAGyB,kBAC9B,IAD8B,CACzBA,GAAK,UADoB,WAHzB,MCkCEgC,MApBf,WACI,OAAS,kBACL,IADK,KAEL,kBACA,EADA,MAEA,kBACA,IADA,CACMC,KAAO,IACbC,OAAU,EACVC,UAAczB,IACX,IARE,IAQG,kBACR,IADQ,CACFuB,KAAO,SACbE,UAAcX,IACX,IAXE,IAWG,kBACR,IADQ,CACFS,KAAO,aACbE,UAAcV,IACX,IAdE,MC1BbW,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,W","file":"static/js/main.28646ac7.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\n//Movie Component는 state가 따로 필요하질 않아서 class로 구현할 필요없다.\n//img 태그에서 alt와 title을 쓰는 이유는 poster에 마우스를 올리면 제목이 뜨게 된다.\nfunction Movie({ id, year, title, summary, poster, genres }) {\n    return ( <\n        div className = \"movie\" >\n        <\n        Link to = {\n            {\n                pathname: `/movie/${id}`,\n                state: {\n                    year: year,\n                    title: title,\n                    summary: summary,\n                    poster: poster,\n                    genres: genres\n                }\n            }\n        } >\n\n        <\n        img src = { poster }\n        alt = { title }\n        title = { title }\n        /> <\n        div className = \"movie__data\" >\n        <\n        h3 className = \"movie__title\" > { title } < /h3>  <\n        h5 className = \"movie__year\" > { year } < /h5> <\n        ul className = \"movie__genres\" > {\n            genres.map((genre, index) => ( <\n                li key = { index }\n                className = \"genres__genre\" > { genre } < /li>\n            ))\n        } < /ul> <\n        p className = \"movie__summary\" > { summary.slice(0, 140) }... < /p> < /\n        div > <\n        /Link> < /\n        div >\n    );\n}\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\nimport './Home.css';\n\n// setState를 사용하지 않으면 새 state와 함께 render function이 호출되지 않는다.\nclass Home extends React.Component {\n    state = {\n        isLoading: true,\n        movies: [],\n    };\n    /*\n    add = () => {\n        this.setState((current) => ({ count: current.count + 1 }));\n    };\n    minus = () => {\n        this.setState({ count: this.state.count - 1 });\n    };\n*/\n    getMovies = async() => {\n        const {\n            data: {\n                data: { movies },\n            },\n        } = await axios.get(\n            'https://yts-proxy.now.sh/list_movies.json?sort_by=rating',\n        ); //--> movies를 console.log로 확인하면 이러한 형태이다. 이렇게 써도 된다.\n        // == const movies = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating',)\n        //async, await을 하는 이유는 기본적으로 javascript에게\n        //getMovies함수가 조금 시간이 필요하고 그걸 기다려야 한다는 것을 알려주기 위해서 이다.\n        this.setState({ movies, isLoading: false }); //axios에서 받아온 내용을 state에 넣어준다.\n    };\n\n    componentDidMount() {\n        this.getMovies();\n    }\n    render() {\n        const { isLoading, movies } = this.state;\n        return ( <\n            section className = \"container\" > { ' ' } {\n                isLoading ? ( <\n                    div className = \"loader\" >\n                    <\n                    span className = \"loader__text\" > Loading.. < /span>{' '} < /\n                    div >\n                ) : ( <\n                    div className = \"movies\" > { ' ' } {\n                        movies.map((movie) => (\n                            //실제 Movie를 rendeing 한다.\n                            <\n                            Movie key = { movie.id }\n                            id = { movie.id }\n                            year = { movie.year }\n                            title = { movie.title }\n                            summary = { movie.summary }\n                            poster = { movie.medium_cover_image }\n                            genres = { movie.genres }\n                            />\n                        ))\n                    } { ' ' } <\n                    /div>\n                )\n            } { ' ' } <\n            /section>\n        );\n    }\n}\n\nexport default Home;","import React from \"react\";\nimport \"./About.css\";\n\nfunction About() {\n    return ( <\n        div className = \"about__container\" >\n        <\n        span > { \" \" }“\n        Freedom is the freedom to say that two plus two make four.If that is granted, all\n        else follows.” { \" \" } <\n            /span>{\" \"} <\n            span > −George Orwell, 1984 < /span>{\" \"} <\n            /div>\n    );\n}\n\nexport default About;\n/*\n라우터에 있는 모든 라우트들은 props를 갖는다.\n*/","import React from 'react';\n\n/*\nMovie의 내용을 가져와야 하기 때문에 Movie.js에 Link를 걸었다.\n\n만약 영화에 대한 클릭 없이 그냥 /movie-detail을 입력하면 props-> location->state는 undefined가 될 것이다.\n만약 undefined 경우라면 home으로 Redirect할 것이다.\n*/\nclass Detail extends React.Component {\n    //props에 대해 보고싶다면 console.log(this.props) 해주면 됨.\n    //component가 생성되면 수행\n    //const { location } = this.props; props에서 location을 가져온다.\n    componentDidMount() {\n        const { location, history } = this.props;\n        if (location.state === undefined) {\n            history.push('/');\n        }\n    }\n    render() {\n        const { location } = this.props;\n        //undefined 경우를 대비.. 여기가 먼저 호출되기 때문에 그땐 location이 없다.\n        if (location.state) {\n            return <span > { location.state.title } < /span>;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Detail;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n/*\n페이지가 새로고침 되는 것을 막기 위해 <a href=\"\"><</a>가 아니라 link를 이용한다. \nLink는 Router 밖에서 쓸 수 없다. 따라서 App.js에서 <Navigation/>을 HashRotuer 밖에서 쓰면\nLink를 사용할 수 없게 되는 것이다.\n\nLink의 to는 to = \"/about\"처럼 표현할 수도 있고 객체 형태로도 표현 가능하다.\nprops의 경우 우리가 링크를 클릭하면 리액트 라우터는 /about으로 데려가고 컴포넌트 About이 되어야 한다. 뿐만 아니라 props도 보내주고 있다.\n[중요]\n!  Link를 통해 정보를 라우터로 보낼 수 있다  !\n즉 원하는 컴포넌트에서 Link 태그로 원하는 정보를 가져온다음 라우터가 있는 App.js에서 그에 맞는 라우트를 작성해주면 정보를 원래 갖고 있던 페이지의 내용을 새로 만든 페이지로 가져올 수 있는 것이다.\n\n*/\nfunction Navigation() {\n    return ( <\n        div className = \"nav\" >\n        <\n        Link to = \"/\" > Home < /Link> <\n        Link to = \"/about\" > About < /Link> < /\n        div >\n    );\n}\n\nexport default Navigation;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation\";\n/*\nHashRouter, Route를 import한다.  (라우터는 명령을 받고 실행해주는 역할이고, 라우트는 경로와 그에맞는 컴포넌트를 라우터에게 명령을 내리는 역할이다.)\nBrowerRouter도 있는데 깃허브 페이지에 설정하기엔 HashRouter가 더 편하다.\nreact-router-dom은 다양한 종류의 라우터들을 가지고 있다.\n\nHashRouter를 리턴하도록 한다. 그리고 그 안에 Route를 넣어준다.\nRoute 안에는 중요한 props가 들어간다. 하나는 Rendering할 스크린이 들어가고 \n다른 하나는 뭘 할지 정해주는 역할을 한다.\n\npath로 들어가서 그 안의 내용은 component로 전달해준다.\n\nReact router는 기본적으로 url을 가져온고 그 다음 비교한다.\n만약 /home, /home/introduction이 있는데 /home/introduction을 이용하면 \n/home, /home/introduction 둘다 화면으로 가져오는 것이다.\n이것을 해결하기 위해 exact = {true}를 사용한다.\n\n하지만 어떻게 두 라우터간에 네이게이트를 할까?\n네이게이션은 모든 페이지에 나오도록 할 것이다. \n해당 링크를 누르면 페이지 전체가 새로고침 되버린다. html은 새로운 페이지를 갈 떄마다 새로고침을 하기 때문이다.\n리액트가 죽고 새 페이지가 새로고침 되는 것이다. 하지만 우리는 이런 것을 원하지 않는다. \n인터랙션을 원하지만 그렇다고 페이지를 강제로 새로고침하고 리액트를 죽이는 것은 원하지 않는다.\n\n*/\nfunction App() {\n    return ( <\n        HashRouter >\n        <\n        Navigation / >\n        <\n        Route path = \"/\"\n        exact = { true }\n        component = { Home }\n        />{\" \"} <\n        Route path = \"/about\"\n        component = { About }\n        />{\" \"} <\n        Route path = \"/movie/:id\"\n        component = { Detail }\n        />{\" \"} <\n        /HashRouter>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render( < App / > , document.getElementById('root'));\n/*\n< App / >은 Component이다.\nComponent는 HTML을 반환하는 함수이다.\nJavascript와 HTML 사이의 이러한 조합을 jsx라고 한다.\n*/"],"sourceRoot":""}